/**
 *   010 Editor v8.0.1 Binary Template
 *
 *      File: Intel Framebuffer kexts from 10.13.3
 *   Authors: vit9696
 *   Version: 0.2
 *   Purpose: Intel Framebuffer decoding
 *
 * Copyright (c) 2018 vit9696
 *
 * Thanks to bcc9, Piker-Alpha and all the others who reversed Intel Framebuffer code.
 */

LittleEndian();

/* There is various not so accurate information but it is worth checking:
 * http://www.insanelymac.com/forum/topic/259705-editing-custom-connectorinfo-for-intel-hd-3000-graphics-sandy-bridge-osx-lion/
 * https://github.com/Piker-Alpha/AppleIntelFramebufferAzul.sh/blob/master/AppleIntelFramebufferAzul.sh
 */

typedef unsigned char uint8_t;
typedef uint16 uint16_t;
typedef uint32 uint32_t;
typedef uint64 uint64_t;
typedef char int8_t;
typedef int16 int16_t;
typedef int32 int32_t;
typedef int64 int64_t;

enum <uint32_t> FirstFramebuffer {
    FirstSandyBridgeId = 0x00040201,
    FirstIvyBridgeId   = 0x01660000,
    FirstHaswellId     = 0x0c060000,
    FirstBroadwellId   = 0x16060000,
    FirstSkylakeId     = 0x191e0000,
    FirstKabyLakeId    = 0x591e0000
};

enum <uint32_t> CameliaVersion {
    CameliaDisabled = 0,      /* -nocam */
    CameliaV1 = 1,            /* -forcecam1 */
    CameliaV2 = 2,            /* -forcecam2 */
    CameliaV3 = 3,            /* not really mention, but appears to be legit */
    CameliaUnsupported = 0xFF /* for snb */
};

/* TODO: reverse this... */
enum <uint32_t> FramebufferFlags {
    AvoidFastLinkTraining       = 0x1,    /* fixme AppleIntelFBController::LinkTraining */
    FBC                         = 0x4,    /* FeatureControl -> FBC, from AppleIntelFBController::getFeatureControl */
    UseVideoTurbo               = 0x20,   /* see fUseVideoTurbo in 10.9 Azul, requires extra turbo freq field we do not have though */
    DisplayStatusAlwaysOn       = 0x40,   /* fixme AppleIntelFramebuffer::getDisplayStatus */
    PowerManagementGranularity  = 0x800,  /* fixme from AppleIntelFBController::start */
    DisableFeatureIPS           = 0x1000, /* AppleIntelFBController::start, explained in AppleIntelFBController::getFeatureControl */
    ConnectorRecover            = 0x4000  /* -noconrecover, from AppleIntelFBController::getOSInformation */
};

/* This is the same as ATI/AMD code. */
enum <uint32_t> ConnectorType {
    ConnectorZero       = 0x0,
    ConnectorDummy      = 0x1,   /* Always used as dummy, seems to sometimes work as VGA */
    ConnectorLVDS       = 0x2,
    ConnectorDigitalDVI = 0x4,   /* Possibly eDP */
    ConnectorSVID       = 0x8,
    ConnectorVGA        = 0x10,
    ConnectorDP         = 0x400,
    ConnectorHDMI       = 0x800,
    ConnectorAnalogDVI  = 0x2000
};

struct ConnectorInfo {
    uint8_t index;
    uint8_t i2cId; /* According to bcc9, but looks likely. */
    uint8_t unk;   /* This is not used before Haswell. */
    /* Assert(unk == 0, "Connector has unknown feature"); */
    uint8_t pad;
    Assert(pad == 0, "Non-zero padding");
    ConnectorType type <read=connectorTypeToPrintable>;
    /* Hardware port number */
    uint32_t port;
};

/* It should be noted that some displays use more than 1 pipe, so maxPipes != maxDisplays. */

struct FramebufferSNB {
    local uint32_t framebufferId = 0;
    uint8_t  fMobile;
    uint8_t  fPipeCount;
    uint8_t  fPortCount; /* also fNumFramebuffer */
    uint8_t  fFBMemoryCount;
    /* 0 means unused. */
    uint32_t fBacklightFrequency;
    uint32_t fBacklightMax;
    ConnectorInfo connectors[4] <read=connectorToPrintable, optimize=false>;
    local uint32_t fStolenMemorySize = 0;
    local uint32_t fFramebufferMemorySize = 0;
    local uint32_t fUnifiedMemorySize = 0;
    local uint8_t  cameliaVersion = CameliaUnsupported;
    local uint32_t flags = 0;
};

uint32_t frameIdFromIndex(uint32_t index) {
    switch (index) {
        case 0: return 0x10000;
        case 1: return 0x20000;
        case 2: return 0x30010; /* also 0x30020 */
        case 3: return 0x30030;
        case 4: return 0x40000;
        case 5: return 0x50000;
        /* There are 8 frames for sandy aside the default one, but only the first 6 are addressible. */
        default:return 0xFFFFFFFF;
    }
}

struct FramebufferIVB {
    uint32_t framebufferId;
    uint8_t  fMobile;
    uint8_t  fPipeCount;
    uint8_t  fPortCount; /* also fNumFramebuffer */
    uint8_t  fFBMemoryCount;
    uint32_t fStolenMemorySize <read=bytesToPrintable>;
    uint32_t fFramebufferMemorySize <read=bytesToPrintable>;
    uint32_t fUnifiedMemorySize <read=bytesToPrintable>;
    uint32_t fBacklightFrequency <read=frequencyToPrintable>;
    uint32_t fBacklightMax <read=frequencyToPrintable>;
    uint32_t unk1[2];
    uint32_t unk2[2];
    uint32_t unk3;
    ConnectorInfo connectors[4] <read=connectorToPrintable, optimize=false>;
    uint32_t pad2[26];
    local uint8_t  cameliaVersion = CameliaUnsupported;
    local uint32_t flags = 0;
};

/* Some names are taken from 10.9 Azul driver. While they may not be the same names used in the struct, they are handy at least. */
struct FramebufferHSW {
    uint32_t framebufferId;
    uint8_t  fMobile;
    uint8_t  fPipeCount;
    uint8_t  fPortCount; /* also fNumFramebuffer */
    uint8_t  fFBMemoryCount;
    uint32_t fStolenMemorySize <read=bytesToPrintable>;
    uint32_t fFramebufferMemorySize <read=bytesToPrintable>;
    /* Note, fCursorBytes appears to be an address, and this is size... */
    uint32_t fCursorMemorySize <read=bytesToPrintable>;
    uint32_t fUnifiedMemorySize <read=bytesToPrintable>;
    uint32_t fBacklightFrequency <read=frequencyToPrintable>;
    uint32_t fBacklightMax <read=frequencyToPrintable>;
    uint32_t pad[2];
    Assert(pad[0] == 0 && pad[1] == 0, "Non-zero padding");
    ConnectorInfo connectors[4] <read=connectorToPrintable, optimize=false>;
    uint32_t flags;
    uint8_t  unk1[3];
    uint8_t  cameliaVersion <read=cameliaToPrintable>;
    uint32_t unk2[4];
};

struct FramebufferBDW {
    uint32_t framebufferId;
    uint8_t  fMobile;
    uint8_t  fPipeCount;
    uint8_t  fPortCount;
    uint8_t  fFBMemoryCount;
    uint32_t fStolenMemorySize <read=bytesToPrintable>;
    uint32_t fFramebufferMemorySize <read=bytesToPrintable>;
    uint32_t fUnifiedMemorySize <read=bytesToPrintable>;
    uint32_t fBacklightFrequency <read=frequencyToPrintable>;
    uint32_t fBacklightMax <read=frequencyToPrintable>;
    uint32_t pad[3];
    Assert(pad[0] == 0 && pad[1] == 0 && pad[2] == 0, "Non-zero padding");
    ConnectorInfo connectors[4] <read=connectorToPrintable, optimize=false>;
    uint32_t flags;
    uint32_t unk1;
    uint32_t cameliaVersion <read=cameliaToPrintable>;
    uint32_t unk2[9];
};

struct FramebufferSKL {
    uint32_t framebufferId;
    uint32_t unk1;
    uint32_t unk2;
    uint32_t unk3;
    uint8_t  fMobile;
    uint8_t  fPipeCount;
    uint8_t  fPortCount;
    uint8_t  fFBMemoryCount;
    uint32_t fStolenMemorySize <read=bytesToPrintable>;
    uint32_t fFramebufferMemorySize <read=bytesToPrintable>;
    uint32_t fUnifiedMemorySize <read=bytesToPrintable>;
    uint32_t fBacklightFrequency <read=frequencyToPrintable>;
    uint32_t fBacklightMax <read=frequencyToPrintable>;
    uint32_t pad[2];
    Assert(pad[0] == 0 && pad[1] == 0, "Non-zero sequence");
    ConnectorInfo connectors[4] <read=connectorToPrintable, optimize=false>;
    /* This might be pretty messed up... */
    uint32_t flags;
    uint32_t unk4;
    uint32_t cameliaVersion <read=cameliaToPrintable>;
    uint32_t unk5[19];
};

string bytesToPrintable(uint32_t bytes) {
    local string out;
    if (bytes >= 1024*1024) {
        if (bytes % (1024*1024) == 0) {
            SPrintf(out, "%d MB", bytes/1024/1024);
        } else {
            SPrintf(out, "%d MB (%d bytes)", bytes/1024/1024, bytes);
        }
    } else if (bytes >= 1024) {
        if (bytes % (1024) == 0) {
            SPrintf(out, "%d KB", bytes/1024);
        } else {
            SPrintf(out, "%d KB (%d bytes)", bytes/1024, bytes);
        }
    } else {
        SPrintf(out, "%d bytes", bytes);
    }
    return out;
}

string frequencyToPrintable(uint32_t freq) {
    local string out;
    SPrintf(out, "%d Hz", freq);
    return out;
}

string cameliaToPrintable(CameliaVersion cam) {
    local string out;
    SPrintf(out, "%s (%d)", EnumToString(cam), cam);
    return out;
}

string connectorTypeToPrintable(ConnectorType type) {
    local string out;
    local string typename = EnumToString(type);
    Assert(typename != "", "Unknown connector type discovered");
    SPrintf(out, "0x%08X - %s", type, EnumToString(type));
    return out;
}

string connectorToPrintable(ConnectorInfo &con) {
    local string out;
    SPrintf(out, "[%d] i2cId: 0x%02X, type: 0x%08X, unk: 0x%02X, port: 0x%08X - %s", con.index, con.i2cId, con.type, con.unk, con.port, EnumToString(con.type));
    return out;
}

string framebufferSNBToPrintable(FramebufferSNB &fb) {
    local string out;
    SPrintf(out, "0x%08X (%s, %s)", fb.framebufferId, fb.fMobile ? "mobile" : "desktop", fb.fPortCount > 0 ? "online" : "offline");
    return out;
}

string framebufferIVBToPrintable(FramebufferIVB &fb) {
    local string out;
    SPrintf(out, "0x%08X (%s, %s)", fb.framebufferId, fb.fMobile ? "mobile" : "desktop", fb.fPortCount > 0 ? "online" : "offline");
    return out;
}

string framebufferHSWToPrintable(FramebufferHSW &fb) {
    local string out;
    SPrintf(out, "0x%08X (%s, %s)", fb.framebufferId, fb.fMobile ? "mobile" : "desktop", fb.fPortCount > 0 ? "online" : "offline");
    return out;
}

string framebufferBDWToPrintable(FramebufferBDW &fb) {
    local string out;
    SPrintf(out, "0x%08X (%s, %s)", fb.framebufferId, fb.fMobile ? "mobile" : "desktop", fb.fPortCount > 0 ? "online" : "offline");
    return out;
}

string framebufferSKLToPrintable(FramebufferSKL &fb) {
    local string out;
    SPrintf(out, "0x%08X (%s, %s)", fb.framebufferId, fb.fMobile ? "mobile" : "desktop", fb.fPortCount > 0 ? "online" : "offline");
    return out;
}

/* Skip a little data to speedup the search. */
local int64_t pos = 0x20000, size = FileSize();
local uint32_t i = 0, j = 0;
local uint32_t firstId = 0;

while (pos < size) {
    /* Skip to platforms... */
    firstId = ReadUInt(pos);
    if (firstId != FirstSandyBridgeId && firstId != FirstIvyBridgeId &&
        firstId != FirstHaswellId && firstId != FirstBroadwellId &&
        firstId != FirstSkylakeId && firstId != FirstKabyLakeId) {
        pos += sizeof(uint32_t);
        continue;
    }
    /* Read platforms from here... */
    FSeek(pos);
    while (ReadUInt() != 0xFFFFFFFF) {
        if (firstId == FirstSandyBridgeId)
            FramebufferSNB frames <optimize=false, read=framebufferSNBToPrintable>;
        else if (firstId == FirstIvyBridgeId)
            FramebufferIVB frames <optimize=false, read=framebufferIVBToPrintable>;
        else if (firstId == FirstHaswellId)
            FramebufferHSW frames <optimize=false, read=framebufferHSWToPrintable>;
        else if (firstId == FirstBroadwellId)
            FramebufferBDW frames <optimize=false, read=framebufferBDWToPrintable>;
        /* Skylake and Kaby Lake share the struct as of 10.13.3 */
        else if (firstId == FirstSkylakeId || firstId == FirstKabyLakeId)
            FramebufferSKL frames <optimize=false, read=framebufferSKLToPrintable>;
        Printf("ID: 0x%08X, DVMT: %s, FBMEM: %s, VRAM: %s, Flags: 0x%08X\n", frames[i].framebufferId == 0 ? frameIdFromIndex(i) : frames[i].framebufferId,
            bytesToPrintable(frames[i].fStolenMemorySize), bytesToPrintable(frames[i].fFramebufferMemorySize), bytesToPrintable(frames[i].fUnifiedMemorySize), frames[i].flags);
        Printf("Camelia: %s, Freq: %s, FreqMax: %s\n", cameliaToPrintable(frames[i].cameliaVersion), 
            frequencyToPrintable(frames[i].fBacklightFrequency), frequencyToPrintable(frames[i].fBacklightMax));
        Printf("Mobile: %d, PipeCount: %d, PortCount: %d, FBMemoryCount: %d\n", frames[i].fMobile, frames[i].fPipeCount,
            frames[i].fPortCount, frames[i].fFBMemoryCount);
        for (j = 0; j < frames[i].fPortCount; j++)
            Printf("%s\n", connectorToPrintable(frames[i].connectors[j]));
        Printf("\n");
        /* There is no -1 termination on Sandy */
        if (firstId == FirstSandyBridgeId && i == 7) break;
        i++;
    }
    break;
}
